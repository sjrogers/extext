var _user$project$VirtualDom_Report$some = function (list) {
	return !_elm_lang$core$List$isEmpty(list);
};
var _user$project$VirtualDom_Report$TagChanges = F4(
	function (a, b, c, d) {
		return {removed: a, changed: b, added: c, argsMatch: d};
	});
var _user$project$VirtualDom_Report$emptyTagChanges = function (argsMatch) {
	return A4(
		_user$project$VirtualDom_Report$TagChanges,
		{ctor: '[]'},
		{ctor: '[]'},
		{ctor: '[]'},
		argsMatch);
};
var _user$project$VirtualDom_Report$hasTagChanges = function (tagChanges) {
	return _elm_lang$core$Native_Utils.eq(
		tagChanges,
		A4(
			_user$project$VirtualDom_Report$TagChanges,
			{ctor: '[]'},
			{ctor: '[]'},
			{ctor: '[]'},
			true));
};
var _user$project$VirtualDom_Report$SomethingChanged = function (a) {
	return {ctor: 'SomethingChanged', _0: a};
};
var _user$project$VirtualDom_Report$MessageChanged = F2(
	function (a, b) {
		return {ctor: 'MessageChanged', _0: a, _1: b};
	});
var _user$project$VirtualDom_Report$VersionChanged = F2(
	function (a, b) {
		return {ctor: 'VersionChanged', _0: a, _1: b};
	});
var _user$project$VirtualDom_Report$CorruptHistory = {ctor: 'CorruptHistory'};
var _user$project$VirtualDom_Report$UnionChange = F2(
	function (a, b) {
		return {ctor: 'UnionChange', _0: a, _1: b};
	});
var _user$project$VirtualDom_Report$AliasChange = function (a) {
	return {ctor: 'AliasChange', _0: a};
};
var _user$project$VirtualDom_Report$Fine = {ctor: 'Fine'};
var _user$project$VirtualDom_Report$Risky = {ctor: 'Risky'};
var _user$project$VirtualDom_Report$Impossible = {ctor: 'Impossible'};
var _user$project$VirtualDom_Report$worstCase = F2(
	function (status, statusList) {
		worstCase:
		while (true) {
			var _p0 = statusList;
			if (_p0.ctor === '[]') {
				return status;
			} else {
				switch (_p0._0.ctor) {
					case 'Impossible':
						return _user$project$VirtualDom_Report$Impossible;
					case 'Risky':
						var _v1 = _user$project$VirtualDom_Report$Risky,
							_v2 = _p0._1;
						status = _v1;
						statusList = _v2;
						continue worstCase;
					default:
						var _v3 = status,
							_v4 = _p0._1;
						status = _v3;
						statusList = _v4;
						continue worstCase;
				}
			}
		}
	});
var _user$project$VirtualDom_Report$evaluateChange = function (change) {
	var _p1 = change;
	if (_p1.ctor === 'AliasChange') {
		return _user$project$VirtualDom_Report$Impossible;
	} else {
		return ((!_p1._1.argsMatch) || (_user$project$VirtualDom_Report$some(_p1._1.changed) || _user$project$VirtualDom_Report$some(_p1._1.removed))) ? _user$project$VirtualDom_Report$Impossible : (_user$project$VirtualDom_Report$some(_p1._1.added) ? _user$project$VirtualDom_Report$Risky : _user$project$VirtualDom_Report$Fine);
	}
};
var _user$project$VirtualDom_Report$evaluate = function (report) {
	var _p2 = report;
	switch (_p2.ctor) {
		case 'CorruptHistory':
			return _user$project$VirtualDom_Report$Impossible;
		case 'VersionChanged':
			return _user$project$VirtualDom_Report$Impossible;
		case 'MessageChanged':
			return _user$project$VirtualDom_Report$Impossible;
		default:
			return A2(
				_user$project$VirtualDom_Report$worstCase,
				_user$project$VirtualDom_Report$Fine,
				A2(_elm_lang$core$List$map, _user$project$VirtualDom_Report$evaluateChange, _p2._0));
	}
};
